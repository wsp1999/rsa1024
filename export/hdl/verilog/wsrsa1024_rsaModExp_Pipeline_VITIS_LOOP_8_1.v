// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module wsrsa1024_rsaModExp_Pipeline_VITIS_LOOP_8_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_i14_i,
        conv_i11_i,
        zext_ln8,
        P_out,
        P_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [1023:0] conv_i14_i;
input  [1023:0] conv_i11_i;
input  [1023:0] zext_ln8;
output  [1023:0] P_out;
output   P_out_ap_vld;

reg ap_idle;
reg P_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] tmp_fu_112_p3;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_subdone;
wire   [1026:0] zext_ln8_cast_fu_79_p1;
reg   [1026:0] zext_ln8_cast_reg_222;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1027:0] conv_i11_i_cast_fu_83_p1;
reg   [1027:0] conv_i11_i_cast_reg_227;
wire   [1027:0] conv_i14_i_cast_fu_87_p1;
reg   [1027:0] conv_i14_i_cast_reg_234;
reg   [11:0] i_4_reg_239;
wire    ap_block_pp0_stage1_11001;
wire   [1027:0] P_8_fu_139_p3;
reg   [1027:0] P_8_reg_247;
wire   [1027:0] P_10_fu_161_p3;
reg   [1027:0] P_10_reg_254;
wire    ap_block_pp0_stage2_11001;
wire   [1026:0] trunc_ln5_fu_168_p1;
reg   [1026:0] trunc_ln5_reg_259;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0_subdone;
reg   [1026:0] P_fu_46;
wire   [1026:0] P_11_fu_186_p3;
wire    ap_loop_init;
wire    ap_block_pp0_stage1;
reg   [11:0] i_fu_50;
wire   [11:0] i_5_fu_193_p2;
wire    ap_block_pp0_stage1_01001;
wire    ap_block_pp0_stage0;
wire   [1027:0] P_1_fu_120_p3;
wire   [0:0] icmp_ln11_fu_128_p2;
wire   [1027:0] add_ln12_fu_134_p2;
wire    ap_block_pp0_stage2;
wire   [0:0] icmp_ln13_fu_147_p2;
wire   [0:0] xor_ln13_fu_151_p2;
wire   [1027:0] P_9_fu_157_p2;
wire   [0:0] icmp_ln15_fu_172_p2;
wire   [0:0] xor_ln15_fu_176_p2;
wire   [1026:0] sub_ln16_fu_182_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

wsrsa1024_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            P_fu_46 <= 1027'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            P_fu_46 <= P_11_fu_186_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_50 <= 12'd1024;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_50 <= i_5_fu_193_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        P_10_reg_254 <= P_10_fu_161_p3;
        trunc_ln5_reg_259 <= trunc_ln5_fu_168_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_112_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        P_8_reg_247 <= P_8_fu_139_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_i11_i_cast_reg_227[1023 : 0] <= conv_i11_i_cast_fu_83_p1[1023 : 0];
        conv_i14_i_cast_reg_234[1023 : 0] <= conv_i14_i_cast_fu_87_p1[1023 : 0];
        zext_ln8_cast_reg_222[1023 : 0] <= zext_ln8_cast_fu_79_p1[1023 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_4_reg_239 <= i_fu_50;
    end
end

always @ (*) begin
    if (((tmp_fu_112_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        P_out_ap_vld = 1'b1;
    end else begin
        P_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_112_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign P_10_fu_161_p3 = ((xor_ln13_fu_151_p2[0:0] == 1'b1) ? P_9_fu_157_p2 : P_8_reg_247);

assign P_11_fu_186_p3 = ((xor_ln15_fu_176_p2[0:0] == 1'b1) ? sub_ln16_fu_182_p2 : trunc_ln5_reg_259);

assign P_1_fu_120_p3 = {{P_fu_46}, {1'd0}};

assign P_8_fu_139_p3 = ((icmp_ln11_fu_128_p2[0:0] == 1'b1) ? add_ln12_fu_134_p2 : P_1_fu_120_p3);

assign P_9_fu_157_p2 = (P_8_reg_247 - conv_i11_i_cast_reg_227);

assign P_out = P_fu_46[1023:0];

assign add_ln12_fu_134_p2 = (P_1_fu_120_p3 + conv_i14_i_cast_reg_234);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign conv_i11_i_cast_fu_83_p1 = conv_i11_i;

assign conv_i14_i_cast_fu_87_p1 = conv_i14_i;

assign i_5_fu_193_p2 = ($signed(i_4_reg_239) + $signed(12'd4095));

assign icmp_ln11_fu_128_p2 = ((i_fu_50 == 12'd1024) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_147_p2 = ((P_8_reg_247 < conv_i11_i_cast_reg_227) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_172_p2 = ((P_10_reg_254 < conv_i11_i_cast_reg_227) ? 1'b1 : 1'b0);

assign sub_ln16_fu_182_p2 = (trunc_ln5_reg_259 - zext_ln8_cast_reg_222);

assign tmp_fu_112_p3 = i_fu_50[32'd11];

assign trunc_ln5_fu_168_p1 = P_10_fu_161_p3[1026:0];

assign xor_ln13_fu_151_p2 = (icmp_ln13_fu_147_p2 ^ 1'd1);

assign xor_ln15_fu_176_p2 = (icmp_ln15_fu_172_p2 ^ 1'd1);

assign zext_ln8_cast_fu_79_p1 = zext_ln8;

always @ (posedge ap_clk) begin
    zext_ln8_cast_reg_222[1026:1024] <= 3'b000;
    conv_i11_i_cast_reg_227[1027:1024] <= 4'b0000;
    conv_i14_i_cast_reg_234[1027:1024] <= 4'b0000;
end

endmodule //wsrsa1024_rsaModExp_Pipeline_VITIS_LOOP_8_1
